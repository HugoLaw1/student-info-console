package seehope.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.collections.map.HashedMap;

import seehope.db.DBUtil;
import seehope.model.LogModel;
import seehope.model.SexModel;

public class LogDao {
	public static boolean deleteLog(String[] ids) {
		boolean result = false;
		String sql = "DELETE FROM SEC_LOG WHERE ID = ?";
		try {
			Connection conn = DBUtil.getInstance().getConnection();
			conn.setAutoCommit(false);
			PreparedStatement stmt = conn.prepareStatement(sql);
			for (String id : ids) {
				
				stmt.setString(1, id);
				stmt.addBatch();
			}
			int[] c = stmt.executeBatch();
			conn.commit();
			if (c.length > 0) {
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * 获取所有的角色数据
	 * 
	 * @return
	 */
	public static List<LogModel> getLogs() {
		List<LogModel> list = new LinkedList<LogModel>();
		Connection conn = DBUtil.getInstance().getConnection();
		String sql = "SELECT * FROM SEC_LOG U ";
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = conn.prepareStatement(sql);
			rs = stmt.executeQuery();
			while (rs.next()) {
				String id = rs.getString("ID");
				String context = rs.getString("CONTEXT");
				Timestamp createdTime = rs.getTimestamp("CREATED_TIME");
				LogModel log = new LogModel();
				log.setId(id);
				log.setContext(context);
				log.setCreatedTime(createdTime);
				list.add(log);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.getInstance().close(rs, stmt);
		}
		return list;
	}

	/**
	 * 获取所有的角色数据总量
	 * 
	 * @return
	 */
	public static int getLogsMapCount(Map param) {
		int count = 0;
		Connection conn = DBUtil.getInstance().getConnection();
		String sql = "SELECT COUNT(1) FROM SEC_LOG U";
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = conn.prepareStatement(sql);
			rs = stmt.executeQuery();
			while (rs.next()) {
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.getInstance().close(rs, stmt);
		}
		return count;
	}

	/**
	 * 获取所有的角色数据
	 * 
	 * @return
	 */
	public static List<Map> getLogsMap(Map param) {
		List<Map> list = new LinkedList<Map>();
		Connection conn = DBUtil.getInstance().getConnection();
		String sql = "SELECT * FROM (SELECT U.*,ROWNUM RN FROM (SELECT * FROM SEC_LOG ORDER BY CREATED_TIME DESC) U ) WHERE RN>? AND RN <?";
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Integer start = (Integer) param.get("start");
		Integer pageSize = (Integer) param.get("pageSize");
		
		try { 
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, start);
			stmt.setInt(2, start+pageSize+1);
			rs = stmt.executeQuery();
			while (rs.next()) {
				String id = rs.getString("ID");
				String context = rs.getString("CONTEXT");
				Timestamp createdTime = rs.getTimestamp("CREATED_TIME");
				
				Map m = new HashedMap();
				m.put("id", id);
				m.put("context", context);
				m.put("createdTime", createdTime);
				list.add(m);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.getInstance().close(rs, stmt);
		}
		//System.out.println(list);
		return list;
	}

	/**
	 * 新增角色
	 * 
	 * @param user
	 * @return
	 */
	public static boolean addLog(String context) {
		boolean result = false;
//		System.out.println("login");
		String sql = "INSERT INTO SEC_LOG (ID,CONTEXT,CREATED_TIME)"
				+ "VALUES(?,?,SYSTIMESTAMP)";
		Connection conn = DBUtil.getInstance().getConnection();
		try {
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setString(1, UUID.randomUUID().toString());
			stmt.setString(2, context);
			int c = stmt.executeUpdate();
			if (c > 0) {
//				System.out.println("logout");
				result = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public static LogModel getLogById(String id) {
		LogModel log = null;
		Connection conn = DBUtil.getInstance().getConnection();
		String sql = "SELECT * FROM SEC_LOG U WHERE U.ID = ?";
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, id);
			rs = stmt.executeQuery();
			while (rs.next()) {
				String context = rs.getString("CONTEXT");
				Timestamp createdTime = rs.getTimestamp("CREATED_TIME");
				log = new LogModel();
				log.setId(id);
				log.setContext(context);
				log.setCreatedTime(createdTime);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.getInstance().close(rs, stmt);
		}
		return log;
	}
	
}
